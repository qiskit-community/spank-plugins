name: Code Linting

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read

env:
  PYTHON_VERSION: 3.13.2
jobs:
  c-linting:
    name: C Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang-tidy
          sudo apt-get install -y slurm-wlm slurm-wlm-basic-plugins libslurm-dev

      - name: Install pkg-config
        run: sudo apt-get install -y pkg-config

      - name: Set up C environment
        run: |
          mkdir -p build_skeleton build_spank_ibm_qrun
          cd build_skeleton
          cmake ../plugins/skeleton -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cd ../build_spank_ibm_qrun
          cmake ../plugins/spank_ibm_qrun -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cd ../../

      - name: Configure Clang-Tidy
        run: |
          echo "Creating .clang-tidy configuration..."
          cat <<EOF > .clang-tidy
          ---
          Checks: '-*,modernize-*,readability-*,performance-*'
          WarningsAsErrors: ''
          HeaderFilterRegex: '.*'
          Suppress: ['llvmlibc-restrict-system-libc-headers', 'misc-include-cleaner', 'cppcoreguidelines-avoid-non-const-global-variables']
          EOF

      - name: Run clang-tidy (C linter)
        run: |
          clang-tidy commands/qrun/daapi_c/*.c -p build_skeleton --config-file=.clang-tidy || true
          clang-tidy plugins/skeleton/*.c -p build_skeleton --config-file=.clang-tidy || true
          clang-tidy plugins/spank_ibm_qrun/*.c -p build_spank_ibm_qrun --config-file=.clang-tidy || true

      - name: Report C linting status
        run: |
          echo "**************************"
          echo " C code linting completed."
          echo "**************************"

  rust-linting:
    name: Rust Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      - name: Install Rust
        run: |
          rustup update stable
          rustup component add clippy rustfmt
          rustfmt --version
          
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run rustfmt (daapi_c)
        working-directory: commands/qrun/daapi_c
        run: |
          cargo fmt --all -- --check
          cargo build --release

      - name: Build daapi_c/app
        working-directory: commands/qrun/daapi_c/app
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan profile detect
          conan install conanfile.txt --build=missing
          pushd build
          cJSON_DIR=./Release/generators cmake .. -DCMAKE_BUILD_TYPE=Release
          popd
          cd build
          make clean
          make

      - name: Run rustfmt (daapi)
        working-directory: commands/qrun/daapi
        run: |
          cargo fmt --all -- --check

      - name: Run Clippy (daapi)
        working-directory: commands/qrun/daapi
        env:
          RUSTFLAGS: "-Dwarnings"
        run: cargo clippy --all-targets --all-features

      - name: Run rustfmt (qrun)
        working-directory: commands/qrun/qrun
        run: cargo fmt --all -- --check

      - name: Run Clippy (qrun)
        working-directory: commands/qrun/qrun
        env:
          RUSTFLAGS: "-Dwarnings"
        run: cargo clippy --all-targets --all-features

      - name: Report Rust linting status
        run: |
          echo "*******************************"
          echo " Rust code linting completed."
          echo "*******************************"

  python-linting:
    name: Python Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint 
          pip install black 
          pip install boto3
          pip install qiskit qiskit-ibm-runtime qiskit_aer
          pip install requests 
          pip install PyYAML
          pip install fastapi
          pip install starlette
          pip install uvicorn

      - name: Lint commands/qrun/qiskit_pubs_gen with pylint
        run: |
          pylint commands/qrun/qiskit_pubs_gen

      - name: Lint daa_sim with pylint
        run: |
          pylint daa_sim/direct_access_client

      - name: Lint qiskit_pubs_gen with black
        run: |
          black --check commands/qrun/qiskit_pubs_gen

      - name: Lint daa_sim with black
        run: |
          black --check daa_sim/direct_access_client

      - name: Report Python linting status
        run: |
          echo "*******************************"
          echo " Python linting completed."
          echo "*******************************"

  shell-linting:
    name: Shell Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.4

      - name: Install Shell Linters
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck shfmt

      - name: Run ShellCheck
        run: shellcheck **/*.sh || true

      - name: Run shfmt (Shell script formatting check)
        run: shfmt -d **/*.sh || true

      - name: Report Shell linting status
        run: |
          echo "*******************************"
          echo " Shell script linting completed."
          echo "*******************************"