/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.21.2
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`get_account_config`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetAccountConfigError {
    Status400(models::ListJobs400Response),
    Status401(models::ListJobs400Response),
    Status404(models::ListJobs400Response),
    Status500(models::ListJobs400Response),
    UnknownValue(serde_json::Value),
}

/// Get the current account information. If no account information is found, returns the default configuration.
pub async fn get_account_config(
    configuration: &configuration::Configuration,
    id: &str,
    ibm_api_version: Option<&str>,
    plan_id: Option<&str>,
) -> Result<models::GetAccountConfig200Response, Error<GetAccountConfigError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_id = id;
    let p_ibm_api_version = ibm_api_version;
    let p_plan_id = plan_id;

    let uri_str = format!(
        "{}/accounts/{id}",
        configuration.base_path,
        id = crate::apis::urlencode(p_id)
    );
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref param_value) = p_plan_id {
        req_builder = req_builder.query(&[("plan_id", &param_value.to_string())]);
    }
    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_ibm_api_version {
        req_builder = req_builder.header("IBM-API-Version", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref crn) = configuration.crn {
        req_builder = req_builder.header("Service-CRN", crn.clone());
    }
    req_builder = req_builder.header(reqwest::header::ACCEPT, "application/json");

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/json");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetAccountConfig200Response`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetAccountConfig200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetAccountConfigError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
