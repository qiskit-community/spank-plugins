/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.21.2
 *
 * Generated by: https://openapi-generator.tech
 */

use super::{configuration, ContentType, Error};
use crate::{apis::ResponseContent, models};
use reqwest;
use serde::{de::Error as _, Deserialize, Serialize};

/// struct for typed errors of method [`get_instance`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInstanceError {
    Status401(models::ListJobs400Response),
    Status403(models::ListJobs400Response),
    Status404(models::ListJobs400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`get_instance_configuration`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GetInstanceConfigurationError {
    Status401(models::ListJobs400Response),
    Status403(models::ListJobs400Response),
    Status404(models::ListJobs400Response),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`replace_instance_data`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ReplaceInstanceDataError {
    Status400(models::ListJobs400Response),
    Status401(models::ListJobs400Response),
    Status403(models::ListJobs400Response),
    Status404(models::ListJobs400Response),
    Status409(models::ListJobs400Response),
    UnknownValue(serde_json::Value),
}

/// Returns the details of the current logged in instance, using CRN from the request header.
pub async fn get_instance(
    configuration: &configuration::Configuration,
    ibm_api_version: Option<&str>,
) -> Result<models::GetInstance200Response, Error<GetInstanceError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ibm_api_version = ibm_api_version;

    let uri_str = format!("{}/instance", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_ibm_api_version {
        req_builder = req_builder.header("IBM-API-Version", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref crn) = configuration.crn {
        req_builder = req_builder.header("Service-CRN", crn.clone());
    }
    req_builder = req_builder.header(reqwest::header::ACCEPT, "application/json");

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/json");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetInstance200Response`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetInstance200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetInstanceError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Returns the configuration for the specified instance e.g. instance limit in seconds, using CRN from the request header.
pub async fn get_instance_configuration(
    configuration: &configuration::Configuration,
    ibm_api_version: Option<&str>,
) -> Result<models::GetInstanceConfiguration200Response, Error<GetInstanceConfigurationError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ibm_api_version = ibm_api_version;

    let uri_str = format!("{}/instances/configuration", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::GET, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_ibm_api_version {
        req_builder = req_builder.header("IBM-API-Version", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref crn) = configuration.crn {
        req_builder = req_builder.header("Service-CRN", crn.clone());
    }
    req_builder = req_builder.header(reqwest::header::ACCEPT, "application/json");

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();
    let content_type = resp
        .headers()
        .get("content-type")
        .and_then(|v| v.to_str().ok())
        .unwrap_or("application/json");
    let content_type = super::ContentType::from(content_type);

    if !status.is_client_error() && !status.is_server_error() {
        let content = resp.text().await?;
        match content_type {
            ContentType::Json => serde_json::from_str(&content).map_err(Error::from),
            ContentType::Text => Err(Error::from(serde_json::Error::custom("Received `text/plain` content type response that cannot be converted to `models::GetInstanceConfiguration200Response`"))),
            ContentType::Unsupported(unknown_type) => Err(Error::from(serde_json::Error::custom(format!("Received `{unknown_type}` content type response that cannot be converted to `models::GetInstanceConfiguration200Response`")))),
        }
    } else {
        let content = resp.text().await?;
        let entity: Option<GetInstanceConfigurationError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}

/// Update the configuration for the specified instance e.g. instance limit in seconds, using CRN from context params of the request.
pub async fn replace_instance_data(
    configuration: &configuration::Configuration,
    ibm_api_version: Option<&str>,
    instance_update: Option<models::ReplaceInstanceDataRequest>,
) -> Result<(), Error<ReplaceInstanceDataError>> {
    // add a prefix to parameters to efficiently prevent name collisions
    let p_ibm_api_version = ibm_api_version;
    let p_instance_update = instance_update;

    let uri_str = format!("{}/instances/configuration", configuration.base_path);
    let mut req_builder = configuration.client.request(reqwest::Method::PUT, &uri_str);

    if let Some(ref user_agent) = configuration.user_agent {
        req_builder = req_builder.header(reqwest::header::USER_AGENT, user_agent.clone());
    }
    if let Some(param_value) = p_ibm_api_version {
        req_builder = req_builder.header("IBM-API-Version", param_value.to_string());
    }
    if let Some(ref token) = configuration.bearer_access_token {
        req_builder = req_builder.bearer_auth(token.to_owned());
    };
    if let Some(ref crn) = configuration.crn {
        req_builder = req_builder.header("Service-CRN", crn.clone());
    }
    req_builder = req_builder.header(reqwest::header::ACCEPT, "application/json");
    req_builder = req_builder.json(&p_instance_update);

    let req = req_builder.build()?;
    let resp = configuration.client.execute(req).await?;

    let status = resp.status();

    if !status.is_client_error() && !status.is_server_error() {
        Ok(())
    } else {
        let content = resp.text().await?;
        let entity: Option<ReplaceInstanceDataError> = serde_json::from_str(&content).ok();
        Err(Error::ResponseError(ResponseContent {
            status,
            content,
            entity,
        }))
    }
}
