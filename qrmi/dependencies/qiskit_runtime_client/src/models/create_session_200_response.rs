/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.21.2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// CreateSession200Response : Job session
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateSession200Response {
    /// Job ID
    #[serde(rename = "id")]
    pub id: String,
    /// Backend name
    #[serde(rename = "backend_name")]
    pub backend_name: String,
    /// Timestamp of when the session was started
    #[serde(rename = "started_at", skip_serializing_if = "Option::is_none")]
    pub started_at: Option<String>,
    /// Timestamp of when the session state was changed to active
    #[serde(rename = "activated_at", skip_serializing_if = "Option::is_none")]
    pub activated_at: Option<String>,
    /// Timestamp of when the session was closed
    #[serde(rename = "closed_at", skip_serializing_if = "Option::is_none")]
    pub closed_at: Option<String>,
    /// Timestamp of when the last job in the session started
    #[serde(rename = "last_job_started", skip_serializing_if = "Option::is_none")]
    pub last_job_started: Option<String>,
    /// Timestamp of when the last job in the session completed
    #[serde(rename = "last_job_completed", skip_serializing_if = "Option::is_none")]
    pub last_job_completed: Option<String>,
    /// The maximum time (in seconds) between jobs to keep the session active
    #[serde(rename = "interactive_ttl", skip_serializing_if = "Option::is_none")]
    pub interactive_ttl: Option<u64>,
    /// The maximum time (in seconds) for session to run, subject to plan limits
    #[serde(rename = "max_ttl", skip_serializing_if = "Option::is_none")]
    pub max_ttl: Option<u64>,
    /// The remaining time (in seconds) for the session to be in the active state while jobs are running.
    #[serde(rename = "active_ttl", skip_serializing_if = "Option::is_none")]
    pub active_ttl: Option<u64>,
    /// The state of the session. - open: The session is waiting to run jobs. - active: The session has priority to run jobs on the backend and is running jobs or is waiting for more jobs to run. - inactive: The session does not have priority and is not running any jobs. - closed: The session is not running any jobs and will not accept/run new jobs.
    #[serde(rename = "state", skip_serializing_if = "Option::is_none")]
    pub state: Option<State>,
    /// The reason for the state change.
    #[serde(rename = "state_reason", skip_serializing_if = "Option::is_none")]
    pub state_reason: Option<String>,
    /// If true, the session is actively accepting new jobs to be queued. If false, jobs will be rejected on create and the session will be immediately closed when there are no more jobs to run in the session.
    #[serde(rename = "accepting_jobs", skip_serializing_if = "Option::is_none")]
    pub accepting_jobs: Option<bool>,
    /// Execution mode to run the session in
    #[serde(rename = "mode")]
    pub mode: Mode,
    #[serde(rename = "timestamps", skip_serializing_if = "Option::is_none")]
    pub timestamps: Option<Vec<models::CreateSession200ResponseTimestampsInner>>,
    /// The id of the user who created the session.
    #[serde(rename = "user_id", skip_serializing_if = "Option::is_none")]
    pub user_id: Option<String>,
    /// Usage in seconds. Can be null for ongoing sessions.
    #[serde(rename = "elapsed_time", skip_serializing_if = "Option::is_none")]
    pub elapsed_time: Option<f64>,
}

impl CreateSession200Response {
    /// Job session
    pub fn new(id: String, backend_name: String, mode: Mode) -> CreateSession200Response {
        CreateSession200Response {
            id,
            backend_name,
            started_at: None,
            activated_at: None,
            closed_at: None,
            last_job_started: None,
            last_job_completed: None,
            interactive_ttl: None,
            max_ttl: None,
            active_ttl: None,
            state: None,
            state_reason: None,
            accepting_jobs: None,
            mode,
            timestamps: None,
            user_id: None,
            elapsed_time: None,
        }
    }
}
/// The state of the session. - open: The session is waiting to run jobs. - active: The session has priority to run jobs on the backend and is running jobs or is waiting for more jobs to run. - inactive: The session does not have priority and is not running any jobs. - closed: The session is not running any jobs and will not accept/run new jobs.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum State {
    #[serde(rename = "open")]
    Open,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "inactive")]
    Inactive,
    #[serde(rename = "closed")]
    Closed,
}

impl Default for State {
    fn default() -> State {
        Self::Open
    }
}
/// Execution mode to run the session in
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "batch")]
    Batch,
    #[serde(rename = "dedicated")]
    Dedicated,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Batch
    }
}
