/*
 * Qiskit Runtime API
 *
 * The Qiskit Runtime API description
 *
 * The version of the OpenAPI document: 0.21.2
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct FindInstanceWorkloads200ResponseWorkloadsInner {
    /// Workload id (job and session id)
    #[serde(rename = "id")]
    pub id: String,
    /// Creation date
    #[serde(rename = "created")]
    pub created: String,
    /// End date
    #[serde(rename = "ended", skip_serializing_if = "Option::is_none")]
    pub ended: Option<String>,
    /// Backend name
    #[serde(rename = "backend")]
    pub backend: String,
    /// Instance as hub/group/project
    #[serde(rename = "instance")]
    pub instance: String,
    /// User id
    #[serde(rename = "user_id")]
    pub user_id: String,
    /// true if the session accepts jobs, false otherwise. Only for sessions, null for jobs
    #[serde(
        rename = "accepting_jobs",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub accepting_jobs: Option<Option<bool>>,
    /// Workload mode: job, session or batch
    #[serde(rename = "mode")]
    pub mode: Mode,
    /// State for the workload.
    #[serde(rename = "status")]
    pub status: Status,
    /// Jobs only, status reason for the job
    #[serde(rename = "status_reason", skip_serializing_if = "Option::is_none")]
    pub status_reason: Option<String>,
    /// Tags for the jobs
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// Usage in seconds. Can be null for ongoing workloads.
    #[serde(rename = "usage_seconds", skip_serializing_if = "Option::is_none")]
    pub usage_seconds: Option<f64>,
}

impl FindInstanceWorkloads200ResponseWorkloadsInner {
    pub fn new(
        id: String,
        created: String,
        backend: String,
        instance: String,
        user_id: String,
        mode: Mode,
        status: Status,
    ) -> FindInstanceWorkloads200ResponseWorkloadsInner {
        FindInstanceWorkloads200ResponseWorkloadsInner {
            id,
            created,
            ended: None,
            backend,
            instance,
            user_id,
            accepting_jobs: None,
            mode,
            status,
            status_reason: None,
            tags: None,
            usage_seconds: None,
        }
    }
}
/// Workload mode: job, session or batch
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "job")]
    Job,
    #[serde(rename = "session")]
    Session,
    #[serde(rename = "batch")]
    Batch,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Job
    }
}
/// State for the workload.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "canceled")]
    Canceled,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "in_progress")]
    InProgress,
}

impl Default for Status {
    fn default() -> Status {
        Self::Completed
    }
}
